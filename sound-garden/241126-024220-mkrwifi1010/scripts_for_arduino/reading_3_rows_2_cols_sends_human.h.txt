////////////// TEST READINGS FOR 3 ROWS AND 2 COLS ///////////////
#include <Arduino.h>

// Pin definitions
const int ROW_PINS[] = {A0, A1, A2};  // Analog input pins for rows
const int COL_PINS[] = {2, 3};        // Digital output pins for columns
const int NUM_ROWS = 3;
const int NUM_COLS = 2;

// Arrays to store sensor values
int currentValues[3][2];    // Current readings
int baselineValues[3][2];   // Calibration baseline
const int NUM_CALIBRATION_SAMPLES = 20;

// Function declarations
void calibrate();
void readMat();

void setup() {
  // Init Serial
  Serial.begin(9600); // prev using 112500 baud rate

  // We need to loop through each of the 3 rows
  // then set row 0 as Analog Read
  // then set column 0 as HIGH digital out
  // then repeat the process using the 2 nested for loops

  // Set pin modes
  for (int r = 0; r < NUM_ROWS; r++) {
    pinMode(ROW_PINS[r], INPUT); // Analog
    // Pin value still needs to be read later on.
    // This just sets pin X as Input or Output
  }

  for (int c = 0; c < NUM_COLS; c++) {
    pinMode(COL_PINS[c], OUTPUT);
    digitalWrite(COL_PINS[c], LOW);  // Start with all columns LOW
  }

  // delay(1000);  // Add a delay to allow serial to initialize
  Serial.println("Starting up...");  // Add this to verify serial is working

  // Initial calibration
  calibrate(); // DUPLICATED? No, just an initial version.
}

int inByte = 0; // Initializing inByte and setting to 0

void loop() {
  if (Serial.available() > 0) {
    int inByte = Serial.read();
    if (inByte == '0') {  // Changed to char '0' (ASCII 48)
      readMat();
    } else if (inByte == 'c') {  // Added option to recalibrate
      calibrate();
    }
  }
}

void calibrate() {
  Serial.println("Starting calibration...");

  // Reset baseline values
  for (int r = 0; r < NUM_ROWS; r++) {
    for (int c = 0; c < NUM_COLS; c++) {
      baselineValues[r][c] = 0;
    }
  }

  // Take multiple samples
  for (int sample = 0; sample < NUM_CALIBRATION_SAMPLES; sample++) {
    for (int c = 0; c < NUM_COLS; c++) {
      // Activate one column at a time
      digitalWrite(COL_PINS[c], HIGH);
      delay(10);  // Small delay for stability

      // Read all rows for this column
      for (int r = 0; r < NUM_ROWS; r++) {
        baselineValues[r][c] += analogRead(ROW_PINS[r]);
        // Creating a sum
      }

      digitalWrite(COL_PINS[c], LOW);
      // setting the column pins back to LOW, as we're done with calibration
    }
  }

  // Calculate averages
  for (int r = 0; r < NUM_ROWS; r++) {
    for (int c = 0; c < NUM_COLS; c++) {
      baselineValues[r][c] /= NUM_CALIBRATION_SAMPLES;
      Serial.print("Baseline R");
      Serial.print(r);
      Serial.print("C");
      Serial.print(c);
      Serial.print(": ");
      Serial.println(baselineValues[r][c]);
    }
  }

  Serial.println("Calibration complete!");
}


void readMat() {
  // Read all sensors
  for (int c = 0; c < NUM_COLS; c++) {
    // Activate one column at a time
    digitalWrite(COL_PINS[c], HIGH);
    delay(10);  // Small delay for stability

    // Read all rows for this column
    for (int r = 0; r < NUM_ROWS; r++) {
      currentValues[r][c] = analogRead(ROW_PINS[r]);
    }

    digitalWrite(COL_PINS[c], LOW);
  }

  // Print the readings
  Serial.println("\n--- Current Readings ---");
  for (int r = 0; r < NUM_ROWS; r++) {
    for (int c = 0; c < NUM_COLS; c++) {
      int difference = currentValues[r][c] - baselineValues[r][c];

      Serial.print("R");
      Serial.print(r);
      Serial.print("C");
      Serial.print(c);
      Serial.print(": ");
      Serial.print(currentValues[r][c]);
      Serial.print(" (diff: ");
      Serial.print(difference);
      Serial.print(")  ");
    }
    Serial.println();
  }
}

// Map serial reading to a range we need, or use constrain();
