// ✅ continuously sends data instead of reading only when triggered by serial input '0'
// ✅ machine-readable CSV format instead of verbose human-readable output
// ✅ Baseline subtraction: difference calculated during output VS difference calculated during reading
// ✅ performs calibration silently
// 👾 New version automatically sends data every 100ms in a CSV format, while the original only sends data when requested through serial input


/////// TESTING with 9 sensors and multiplexer ///////
#include <Arduino.h>

// Pin definitions
const int ROW_PINS[] = {A0, A1, A2};  // Analog input pins for rows
const int MUX_SIG = 8;    // Multiplexer signal pin
const int MUX_S3 = 9;     // Multiplexer control pin S3
const int MUX_S2 = 10;    // Multiplexer control pin S2
const int MUX_S1 = 11;    // Multiplexer control pin S1
const int MUX_S0 = 12;    // Multiplexer control pin S0

const int NUM_ROWS = 3;
const int NUM_COLS = 9;

//// 👾 PROBABLY NEEDS CHANGES /////
// Arrays to store sensor values
int currentValues[3][9];    // Current readings
int baselineValues[3][9];   // Calibration baseline
const int NUM_CALIBRATION_SAMPLES = 20;

void calibrate();
void readMat();

void setup() {
  Serial.begin(9600);

  // Set pin modes
  for (int r = 0; r < NUM_ROWS; r++) {
    pinMode(ROW_PINS[r], INPUT); // Analog
  }

  // Setup multiplexer pins
  pinMode(MUX_SIG, OUTPUT);
  pinMode(MUX_S3, OUTPUT);
  pinMode(MUX_S2, OUTPUT);
  pinMode(MUX_S1, OUTPUT);
  pinMode(MUX_S0, OUTPUT);
  digitalWrite(MUX_SIG, LOW);  // Start with signal LOW

  delay(1000);  // Allow serial to initialize
  Serial.println("Starting up...");
  calibrate();
}

// 🍑 Helper function to set multiplexer channel
  // handle the 4-bit channel selection
void setMuxChannel(int channel) {
  digitalWrite(MUX_S0, channel & 0x01);
  digitalWrite(MUX_S1, (channel >> 1) & 0x01);
  digitalWrite(MUX_S2, (channel >> 2) & 0x01);
  digitalWrite(MUX_S3, (channel >> 3) & 0x01);
}

//// 👾 LOOP FUNCTION UNCHANGED?
void loop() {
  readMat();

  // Send sensor readings in CSV format
  for (int r = 0; r < NUM_ROWS; r++) {
    for (int c = 0; c < NUM_COLS; c++) {
      Serial.print(currentValues[r][c]);
      if (c < NUM_COLS - 1) Serial.print(","); // Add comma between columns
    }
    if (r < NUM_ROWS - 1) Serial.print(","); // Add comma between rows
  }
  Serial.println();  // Newline after each reading

  delay(20); // ⚪️ Adjust delay as needed
  // from 100, to 20, to completely removing
}

void calibrate() {
  for (int r = 0; r < NUM_ROWS; r++) {
    for (int c = 0; c < NUM_COLS; c++) {
      baselineValues[r][c] = 0;
    }
  }

  for (int sample = 0; sample < NUM_CALIBRATION_SAMPLES; sample++) {
    for (int c = 0; c < NUM_COLS; c++) {
      setMuxChannel(c);
      digitalWrite(MUX_SIG, HIGH);
      delay(10);
      for (int r = 0; r < NUM_ROWS; r++) {
        baselineValues[r][c] += analogRead(ROW_PINS[r]);
      }
      digitalWrite(MUX_SIG, LOW);
    }
  }

  // Averaging code?
  for (int r = 0; r < NUM_ROWS; r++) {
    for (int c = 0; c < NUM_COLS; c++) {
      baselineValues[r][c] /= NUM_CALIBRATION_SAMPLES;
    }
  }
}

void readMat() {
  for (int c = 0; c < NUM_COLS; c++) {
    setMuxChannel(c);
    digitalWrite(MUX_SIG, HIGH);
    delay(10);
    for (int r = 0; r < NUM_ROWS; r++) {
      // Clamping the values to 0 so that there's no negatives:
      int diff = analogRead(ROW_PINS[r]) - baselineValues[r][c];
      currentValues[r][c] = (diff < 0) ? 0 : diff;
    }
    digitalWrite(MUX_SIG, LOW); // MUX_SIG instead of COL_PINS[c]
  }
}
